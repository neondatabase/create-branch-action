name: 'Neon Database Create Branch Action'
author: 'Neon Database'
description: 'Creates a new Neon Postgres branch based a parent branch. If the branch already exists it will return the branch details'
branding:
  icon: 'box'
  color: 'green'

inputs:
  project_id:
    required: true
    type: string
  branch_name:
    required: false
    type: string
  api_key:
    required: true
  username:
    required: true
  database:
    type: string
    default: neondb

outputs:
  db_url:
    description: 'New branch DATABASE_URL'
    value: ${{ steps.create-branch.outputs.db_url }}
  db_url_with_pooler:
    description: 'New branch DATABASE_URL'
    value: ${{ steps.create-branch.outputs.db_url_with_pooler }}
  host:
    description: 'New branch host'
    value: ${{ steps.create-branch.outputs.host }}
  branch_id:
    description: 'New branch id'
    value: ${{ steps.create-branch.outputs.branch_id }}

runs:
  using: 'composite'
  steps:
    - uses: actions/setup-node@v3
    - run: yarn add neonctl
      shell: bash
    - name: Create new Neon branch
      env:
        NEON_API_KEY: ${{ inputs.api_key }}
      id: create-branch
      shell: bash {0}
      run: |
        branch=$(yarn -s neonctl branches create \
          --project.id ${{ inputs.project_id }} \
          --branch.name ${{ inputs.branch_name }} \
          --endpoint.type read_write -o json)

        if [[ $branch == *"already exists"* ]]; then

        # Get the branch id by its name. We list all branches and filter by name
        branch_id=$(yarn -s neonctl branches list --project.id ${{ inputs.project_id }} -o json \
            | jq -r .branches \
            | jq -c '.[] | select(.name | contains("'${BRANCH_NAME}'")) .id' \
            | jq -r)

        # Get the list of endpoints for the branch by its id.
        endpoints=$(yarn -s neonctl endpoints list \
          --api-key ${{ inputs.api_key }} \
          --project.id ${{ inputs.project_id }} \
          --branch.id $branch_id \
          -o json)

        endpoint_id=$(echo $endpoints | jq --raw-output '.endpoints[0].id')
        proxy_host=$(echo $endpoints | jq --raw-output '.endpoints[0].proxy_host')
        branch_id=$(echo $endpoints | jq --raw-output '.endpoints[0].branch_id')
        host=$(echo $endpoints | jq --raw-output '.endpoints[0].host')

        echo "host=${host}" >> $GITHUB_OUTPUT
        echo "endpoint_id=${endpoint_id}" >> $GITHUB_OUTPUT
        echo "branch_id=${branch_id}" >> $GITHUB_OUTPUT
        echo "db_url=$(yarn -s neonctl cs --project.id ${{ inputs.project_id }} --endpoint.id $endpoint_id --role.name ${{ inputs.username }} --database.name ${{ inputs.database }})" >> $GITHUB_OUTPUT
        echo "db_url_with_pooler=$(yarn -s neonctl cs --project.id ${{ inputs.project_id }} --endpoint.id $endpoint_id --role.name ${{ inputs.username }} --database.name ${{ inputs.database }} --pooled)" >> $GITHUB_OUTPUT

        else
          endpoint_id=$(echo $branch | jq --raw-output '.endpoints[0].id')
          host=$(echo $branch | jq --raw-output '.endpoints[0].host')
          branch_id=$(echo $branch | jq --raw-output '.id')

          echo "host=${host}" >> $GITHUB_OUTPUT
          echo "endpoint_id=${endpoint_id}" >> $GITHUB_OUTPUT
          echo "branch_id=${branch_id}" >> $GITHUB_OUTPUT
          echo "db_url=$(yarn -s neonctl cs --project.id ${{ inputs.project_id }} --endpoint.id $endpoint_id --role.name ${{ inputs.username }} --database.name ${{ inputs.database }})" >> $GITHUB_OUTPUT
          echo "db_url_with_pooler=$(yarn -s neonctl cs --project.id ${{ inputs.project_id }} --endpoint.id $endpoint_id --role.name ${{ inputs.username }} --database.name ${{ inputs.database }} --pooled)" >> $GITHUB_OUTPUT
        fi
