name: 'Neon Database Create Branch Action'
author: 'Neon Database'
description: 'Creates a new Neon Postgres branch based a parent branch. If the branch already exists it will return the branch details'
branding:
  icon: 'box'
  color: 'green'

inputs:
  project_id:
    required: true
    description: 'The project id'
  branch_name:
    required: false
    description: 'The branch name'
  api_key:
    description: 'The Neon API key'
    required: true
  username:
    description: 'The db role name'
    required: true
  database:
    description: 'The database name'
    default: neondb
  prisma:
    description: 'Use prisma or not'
    default: 'false'

outputs:
  db_url:
    description: 'New branch DATABASE_URL'
    value: ${{ steps.create-branch.outputs.db_url }}
  db_url_with_pooler:
    description: 'New branch DATABASE_URL'
    value: ${{ steps.create-branch.outputs.db_url_with_pooler }}
  host:
    description: 'New branch host'
    value: ${{ steps.create-branch.outputs.host }}
  host_with_pooler:
    description: 'New branch pooled host'
    value: ${{ steps.create-branch.outputs.host_with_pooler }}
  branch_id:
    description: 'New branch id'
    value: ${{ steps.create-branch.outputs.branch_id }}

runs:
  using: 'composite'
  steps:
    - uses: actions/setup-node@v3
    - run: yarn global add neonctl@v1
      shell: bash
    - name: Create new Neon branch
      env:
        NEON_API_KEY: ${{ inputs.api_key }}
      id: create-branch
      shell: bash
      run: |
        neonctl branches create \
          --project-id ${{ inputs.project_id }} \
          --name ${{ inputs.branch_name }} \
          --output json \
          2> branch_err > branch_out || true

        echo "branch created:\n" >> debug.log

        if [[ $(cat branch_err) == *"already exists"* ]]; then

          # Get the branch id by its name. We list all branches and filter by name
          branch_id=$(neonctl branches list --project-id ${{ inputs.project_id }} -o json \
              | jq -c '.[] | select(.name | contains("'${{ inputs.branch_name }}'")) .id' \
              | jq -r)

          echo "branch exists, branch id: ${branch_id}\n" >> debug.log

          echo "branch_id=${branch_id}" >> $GITHUB_OUTPUT
          NEON_CS=$(neonctl cs ${branch_id} --project-id ${{ inputs.project_id }} --role-name ${{ inputs.username }} --database-name ${{ inputs.database }} --prisma ${{ inputs.prisma }} --extended -o json)
          DB_URL=$(echo $NEON_CS | jq -r '.connection_string')
          DB_HOST=$(echo $NEON_CS | jq -r '.host')
          NEON_CS_POOLER=$(neonctl cs ${branch_id} --project-id ${{ inputs.project_id }} --role-name ${{ inputs.username }} --database-name ${{ inputs.database }} --pooled --prisma ${{ inputs.prisma }} --extended -o json)
          DB_URL_WITH_POOLER=$(echo $NEON_CS_POOLER | jq -r '.connection_string')
          DB_HOST_WITH_POOLER=$(echo $NEON_CS_POOLER | jq -r '.host')
        else
          branch_id=$(cat branch_out | jq --raw-output '.branch.id')

          echo "branch doesn't exist, branch id: ${branch_id}\n" >> debug.log

          echo "branch_id=${branch_id}" >> $GITHUB_OUTPUT
          NEON_CS=$(neonctl cs ${branch_id} --project-id ${{ inputs.project_id }} --role-name ${{ inputs.username }} --database-name ${{ inputs.database }} --prisma ${{ inputs.prisma }} --extended -o json)
          DB_URL=$(echo $NEON_CS | jq -r '.connection_string')
          DB_HOST=$(echo $NEON_CS | jq -r '.host')
          NEON_CS_POOLER=$(neonctl cs ${branch_id} --project-id ${{ inputs.project_id }} --role-name ${{ inputs.username }} --database-name ${{ inputs.database }} --pooled --prisma ${{ inputs.prisma }} --extended -o json)
          DB_URL_WITH_POOLER=$(echo $NEON_CS_POOLER | jq -r '.connection_string')
          DB_HOST_WITH_POOLER=$(echo $NEON_CS_POOLER | jq -r '.host')
        fi
        echo "db_url=${DB_URL}" >> $GITHUB_OUTPUT
        echo "db_url_with_pooler=${DB_URL_WITH_POOLER}" >> $GITHUB_OUTPUT
        echo "host=${DB_HOST}" >> $GITHUB_OUTPUT
        echo "host_with_pooler=${DB_HOST_WITH_POOLER}" >> $GITHUB_OUTPUT
    - uses: actions/upload-artifact@v3
      if: always()
      with:
        name: Create branch log
        path: debug.log

